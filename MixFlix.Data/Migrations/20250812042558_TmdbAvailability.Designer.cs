// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using MixFlix.Data;

#nullable disable

namespace MixFlix.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250812042558_TmdbAvailability")]
    partial class TmdbAvailability
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MixFlix.Data.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("JustWatchId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("just_watch_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("TmdbId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tmdb_id");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("MixFlix.Data.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Cast")
                        .HasColumnType("text")
                        .HasColumnName("cast");

                    b.Property<string>("ClipUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("clip_url");

                    b.Property<long?>("DislikeCount")
                        .HasColumnType("bigint")
                        .HasColumnName("dislike_count");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("image_url");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("imdb_id");

                    b.Property<double?>("ImdbScore")
                        .HasColumnType("double precision")
                        .HasColumnName("imdb_score");

                    b.Property<long?>("ImdbVotes")
                        .HasColumnType("bigint")
                        .HasColumnName("imdb_votes");

                    b.Property<string>("JustWatchId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("just_watch_id");

                    b.Property<double?>("JustWatchRating")
                        .HasColumnType("double precision")
                        .HasColumnName("just_watch_rating");

                    b.Property<string>("Language")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("language");

                    b.Property<long?>("LikeCount")
                        .HasColumnType("bigint")
                        .HasColumnName("like_count");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("release_year");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer")
                        .HasColumnName("runtime");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<string>("TitleEn")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title_en");

                    b.Property<string>("TmdbId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tmdb_id");

                    b.Property<double?>("TmdbPopularity")
                        .HasColumnType("double precision")
                        .HasColumnName("tmdb_popularity");

                    b.Property<double?>("TmdbScore")
                        .HasColumnType("double precision")
                        .HasColumnName("tmdb_score");

                    b.Property<int?>("TomatoMeter")
                        .HasColumnType("integer")
                        .HasColumnName("tomato_meter");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_content");

                    b.ToTable("content", (string)null);
                });

            modelBuilder.Entity("MixFlix.Data.ContentAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.Property<DateTimeOffset>("JustWatchLastSeen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("just_watch_last_seen");

                    b.Property<int?>("JustWatchRanking")
                        .HasColumnType("integer")
                        .HasColumnName("just_watch_ranking");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<DateTimeOffset>("TmdbLastSeen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tmdb_last_seen");

                    b.Property<int?>("TmdbRanking")
                        .HasColumnType("integer")
                        .HasColumnName("tmdb_ranking");

                    b.HasKey("Id")
                        .HasName("pk_content_availability");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_content_availability_content_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_content_availability_service_id");

                    b.ToTable("content_availability", (string)null);
                });

            modelBuilder.Entity("MixFlix.Data.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("RequireApproval")
                        .HasColumnType("boolean")
                        .HasColumnName("require_approval");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("settings");

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_group_creator_id");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("MixFlix.Data.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_group_members");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_group_members_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_group_members_user_id");

                    b.ToTable("group_members", (string)null);
                });

            modelBuilder.Entity("MixFlix.Data.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("JustWatchId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("just_watch_id");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("TmdbId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tmdb_id");

                    b.HasKey("Id")
                        .HasName("pk_service");

                    b.ToTable("service", (string)null);
                });

            modelBuilder.Entity("MixFlix.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("MixFlix.Data.UserRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<DateTimeOffset?>("RatingTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rating_time");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_rating");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_user_rating_content_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_rating_user_id");

                    b.ToTable("user_rating", (string)null);
                });

            modelBuilder.Entity("content_categories", b =>
                {
                    b.Property<Guid>("content_id")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.Property<Guid>("category_id")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.HasKey("content_id", "category_id")
                        .HasName("pk_content_categories");

                    b.HasIndex("category_id")
                        .HasDatabaseName("ix_content_categories_category_id");

                    b.ToTable("content_categories", (string)null);
                });

            modelBuilder.Entity("MixFlix.Data.ContentAvailability", b =>
                {
                    b.HasOne("MixFlix.Data.Content", "Content")
                        .WithMany("Availabilities")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_availability_contents_content_id");

                    b.HasOne("MixFlix.Data.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_availability_services_service_id");

                    b.Navigation("Content");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MixFlix.Data.Group", b =>
                {
                    b.HasOne("MixFlix.Data.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_user_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MixFlix.Data.GroupMember", b =>
                {
                    b.HasOne("MixFlix.Data.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_members_group_group_id");

                    b.HasOne("MixFlix.Data.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_members_user_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MixFlix.Data.UserRating", b =>
                {
                    b.HasOne("MixFlix.Data.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_rating_content_content_id");

                    b.HasOne("MixFlix.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_rating_user_user_id");

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("content_categories", b =>
                {
                    b.HasOne("MixFlix.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_categories_categories_category_id");

                    b.HasOne("MixFlix.Data.Content", null)
                        .WithMany()
                        .HasForeignKey("content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_categories_content_content_id");
                });

            modelBuilder.Entity("MixFlix.Data.Content", b =>
                {
                    b.Navigation("Availabilities");
                });

            modelBuilder.Entity("MixFlix.Data.Group", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("MixFlix.Data.User", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
